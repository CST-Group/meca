plugins {
	id 'java-library-distribution'
  	id 'jacoco'
  	id 'maven-publish'
}

group = 'com.github.CST-Group'

description = "The Multipurpose Enhanced Cognitive Architecture (MECA)"

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.7.0'

repositories {
    flatDir {
        dirs '../cst/build/libs'
    }
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
    }
    maven {
        url "https://artifacts.camunda.com/artifactory/public/"
    }
}

configurations {
    extraLibs
}

dependencies {
   api('com.github.CST-Group:cst-desktop:1.1.0') 
   api 'org.ros.rosjava_messages:std_msgs:0.5.11'
   testImplementation group: 'junit', name: 'junit', version: '4.12'
   testImplementation 'org.ros.rosjava_messages:std_msgs:0.5.11'
   testImplementation 'org.ros.rosjava_messages:rosjava_test_msgs:0.3.0'
   
}

// forces all changing dependencies (i.e. SNAPSHOTs) to automagicially download
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

jar {
    manifest {
      attributes(
        'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')    
      )
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
    from {
    	configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    javadoc.options.addStringOption('Xdoclint:none', '-quiet') // this is to avoid complaints about documentation missing parameter description
}
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


task uberJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier = 'full'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

artifacts
{
    archives javadocJar, sourcesJar, uberJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
